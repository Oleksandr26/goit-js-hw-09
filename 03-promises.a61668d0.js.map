{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SAIvC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UACpBQ,QAAQC,IAAIT,IAEZG,EAAO,CAAEJ,WAAUC,YAEpBA,MAIPL,EAAQe,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBAMN,IALA,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAUH,EAAMI,MAChBC,EAASJ,EAAKG,MACdE,EAAWC,OAAOL,EAAOE,OAEpBI,EAAI,EAAGA,EAAIF,EAAUE,IAAK,CACjC,IAAIC,EAAaF,OAAOJ,GAAWI,OAAOF,GAAUG,EAEpD1B,EADkB0B,EAAI,EACSC,GAC5BC,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBP,EAAAmC,OAAOC,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,UAE9D+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBP,EAAAmC,OAAOI,QAAQ,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,UAGlEW,EAAMsB,cAAcC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nlet positionCounter = 0;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(delay);\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nformRef.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.target.elements;\n  let delayEl = delay.value;\n  let stepEL = step.value;\n  let amountEL = Number(amount.value);\n\n  for (let i = 0; i < amountEL; i++) {\n    let totalDelay = Number(delayEl) + Number(stepEL) * i;\n    positionCounter = i + 1;\n    createPromise(positionCounter, totalDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n}\n\n// const intervalID = setInterval(() => {\n//   positionCounter += 1;\n//   createPromise(positionCounter, delayEl)\n//     .then(({ position, delay }) => {\n//       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch(({ position, delay }) => {\n//       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n//   console.log(delayEl);\n//   if (amountEL <= positionCounter) {\n//     clearInterval(intervalID);\n//     return;\n//   }\n// }, totalDelay);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","_elements","target","elements","delay1","step","amount","delayEl","value","stepEL","amountEL","Number","i","totalDelay","then","param","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.a61668d0.js.map"}