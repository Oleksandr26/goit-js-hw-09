{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SAEvC,IAAIC,EAAkB,EAEtB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IACpBQ,QAAQC,IAAIT,IAEZG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAIPN,EAAQgB,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,OAAOC,SAC7C,IAAIC,EAAUL,EAAMM,MAChBC,EAASN,EAAKK,MACdE,EAAWC,OAAOP,EAAOI,OAE7B,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAUE,IAAK,CACjC,IAAIC,EAAaF,OAAOJ,GAAWI,OAAOF,GAAUG,EACpD1B,EAAkB0B,EAAI,EACtBzB,EAAcD,EAAiB2B,GAC5BC,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBR,EAAAkC,OAAOC,QAAQ,uBAAqB5B,QAAiBC,UAEtD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBR,EAAAkC,OAAOG,QAAQ,sBAAoB9B,QAAiBC,UAG1DW,EAAMmB,cAAcC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nlet positionCounter = 0;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(delay);\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nformRef.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.target.elements;\n  let delayEl = delay.value;\n  let stepEL = step.value;\n  let amountEL = Number(amount.value);\n\n  for (let i = 0; i < amountEL; i++) {\n    let totalDelay = Number(delayEl) + Number(stepEL) * i;\n    positionCounter = i + 1;\n    createPromise(positionCounter, totalDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n}\n\n// const intervalID = setInterval(() => {\n//   positionCounter += 1;\n//   createPromise(positionCounter, delayEl)\n//     .then(({ position, delay }) => {\n//       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch(({ position, delay }) => {\n//       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n//   console.log(delayEl);\n//   if (amountEL <= positionCounter) {\n//     clearInterval(intervalID);\n//     return;\n//   }\n// }, totalDelay);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$positionCounter","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","delay1","step","amount","target","elements","delayEl","value","stepEL","amountEL","Number","i","totalDelay","then","Notify","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.09814310.js.map"}